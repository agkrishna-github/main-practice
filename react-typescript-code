npx create-react-app react-typescript-demo --template typescript

...

npm start

...

App.tsx

import { Greet } from './components/props/Greet'

function App() {
    return (
      <div>
          <Greet name='Vishwas'  />
      </div>
    )
}

export default App;

..........

Greet.tsx

type GreetProps = {
  name: string
 }

export const Greet = (props: GreetProps) => {
  
  return (
    <div>
     
          Hey {props.name}! You have 10 unread messages
     
    </div>
  )
}

...........

App.tsx

<Greet name='krishna' messageCount={20} isLoggedIn={false} />

...

Greet.tsx

type GreetProps = {
  name: string
  messageCount: number
  isLoggedIn: boolean
}

export const Greet = (props: GreetProps) => {
 
  return (
    <div>
      {props.isLoggedIn ? (
        <h2>
          Hey {props.name}! You have {props.messageCount} unread messages
        </h2>
      ) : (
        <h2>Welcome Guest</h2>
      )}
    </div>
  )
}

.......

App.tsx

import { Person } from './components/props/Person'


function App(){
  
 const personName = {
    first: 'Bruce',
    last: 'Wayne'
  }

   return (
    <div className='App'>
       <Person name={personName} />
     </div>
     )
}

export default App;

...

Person.tsx

type PersonProps = {
  name: {
    first: string
    last: string
  } 
}

export const Person = (props: PersonProps) => {
  return (
    <h2>
      {props.name.first} {props.name.last}
    </h2>
  )
}

.............

App.js

import { PersonList } from './components/props/PersonList'

function App() {
  
  const nameList = [
    {
      first: 'Bruce',
      last: 'Wayne'
    },
    {
      first: 'Clark',
      last: 'Kent'
    },
    {
      first: 'Princess',
      last: 'Diana'
    }
  ]

  return (
    <PersonList names={nameList} />
  )
}

......................

PersonList.tsx

type PersonsListProps = {
  names: {
   first: string,
    last: string
}[]
}

export const PersonList = (props: PersonsListProps) => {
  return(
    <div>
        {props.names.map((name) => (
          <h2>{name.first} {name.last}</h2>
        ))}
    </div>
  )
}

.................

App.tsx

import { Status } from './components/props/PersonList'

function App() {
    return (
      <div>
        <Status  status='loading' />
      </div>
  )
}

................

Status.tsx

type StatusProps = {
  status: string
}

export const Status = (props: StatusProps) => {
  let message
  if (props.status === 'loading') {
    message = 'Loading...'
  } else if (props.status === 'success') {
    message = 'Data fetched successfully!'
  } else if (props.status === 'error') {
    message = 'Error fetching data'
  }
  return <h2>Status - {message}</h2>
}

..............

Status.tsx

type StatusProps = {
  status: 'loading' | 'success' | 'error'
}

...............

App.tsx

import { Heading } from './components/props/Heading'

function App(){
  return(
    <div>
      <Heading>Placeholder text</Heading>
    </div>
  )
}

..........

Heading.tsx

type HeadingProps = {
  children: string
}


export const Heading = (props: HeadingProps) => {
  return <h2>{props.children}</h2>
}

............................


App.tsx

import { Oscar } from './components/props/Heading'

function App(){
  return(
    <div>
     <Oscar>
        <Heading>Oscar goes to Dicaprio</Heading>
      </Oscar>
    </div>
  )
}

...............

Oscar.tsx

type OscarProps = {
  children: React.ReactNode
}

export const Oscar = (props: OscarProps) => {
  return <div>{props.children}</div>
}

......................

App.tsx

<Greet name='krishna'  isLoggedIn={false} />

...

Greet.tsx

type GreetProps = {
  name: string
  messageCount?: number
  isLoggedIn: boolean
}

export const Greet = (props: GreetProps) => {
 
  return (
    <div>
      {props.isLoggedIn ? (
        <h2>
          Hey {props.name}! You have {props.messageCount} unread messages
        </h2>
      ) : (
        <h2>Welcome Guest</h2>
      )}
    </div>
  )
}

.......


export const Greet = (props: GreetProps) => {
   const { messageCount = 0 } = props
  return (
    <div>
      {props.isLoggedIn ? (
        <h2>
          Hey {props.name}! You have {messageCount} unread messages
        </h2>
      ) : (
        <h2>Welcome Guest</h2>
      )}
    </div>
  )
}

....................

App.tsx

import { Button } from './components/props/Button'

function App(){
  return(
    <div>
     <Button
        handleClick={() => {
          console.log('Button clicked')
        }}
      />     
     
    </div>
  )
}

...................................

Button.tsx

type ButtonProps = {
  handleClick: () => void
}

export const Button = (props: ButtonProps) => {
  return <button onClick={ props.handleClick }>Click</button>
}

..............................


App.tsx

import { Button } from './components/props/Button'

function App(){
  return(
    <div>
     <Button
        handleClick={(event, id) => {
          console.log('Button clicked', event, id)
        }}
      />
     
    </div>
  )
}

.........................

Button.tsx


type ButtonProps = {
  handleClick: (event: React.MouseEvent<HTMLButtonElement>, id: number) => void
}

export const Button = (props: ButtonProps) => {
  return <button onClick={event => props.handleClick(event, 1)}>Click</button>
}

......................

App.tsx

import { Input } from './components/props/Input'

function App(){
  return(
    <div>
     <Input value='' handleChange={(event) => console.log(event)}   />
     
    </div>
  )
}

..........

Input.tsx

type InputProps = {
    value: string
    handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void
}

export const Input = (props: InputProps) => {
  return <input type="text" value={props.value} onChange={props.hancleChange} />
}

.......................

App.tsx

import { Container } from './components/props/Container'

function App() {
    return(
        <Container styles={{ border: '1px solid black', padding: '1rem' }} />
    )
}

......................

Container.tsx

type ContainerProps= {
  styles: React.CSSProperties
}

export const Container = (props: ContainerProps) => {
  return (
    <div style={props.styles}>
      Text content goes here
    </div>
  )
}

.........................

8 video completed:

User.txt

import {useState} from 'react'

type AuthUser = {
    name: string
    email: string
}

export const User = () => {
    const [user, setUser] = useState<AuthUser | null>(null)

    const handleLogin = () => {
        setUser({name: 'krishna', email:'krishna@gmail.com'})
    }
    const handleLogout = () => {
        setUser(null)
    }

    return(
        <div>
            <h1>{user?.name}</h1>
            <h1>{user?.email}</h1>
        </div>
    )
}

...........................

const [user, setUser] = useState<AuthUser>({} as AuthUser)

 return(
        <div>
            <h1>{user.name}</h1>
            <h1>{user.email}</h1>
        </div>
    )

.............

Counter.tsx

import {useReducer} from 'react'

type CounterState = {
    count: number
}

type CounterAction = {
    type: string
    payload: number
}

function reducer(state: CounterState, action: CounterAction){
    switch(){

    }
}

.....................


type CounterAction = {
    type: 'increment' | 'decrement'
    payload: number
}

..........................


type CounterState = {
    count: number
}


type UpdateAction = {
    type: 'increment' | 'decrement'
    payload: number
}


type ResetAction = {
    type: 'reset'
}

type CounterAction = UpdateAction | ResetAction

.................

video 13 completed

App.tsx

import { ThemeContextProvider } from './components/context/ThemeContext'
import { Box } from './components/context/Box'

function App(){
    return(
        <div>
            <ThemeContextProvider>
                <Box />
            </ThemeContextProvider>
        </div>
    )
}


...............

theme.ts

export const theme = {
  primary: {
    main: '#3f51b5',
    text: '#fff'
  },
  secondary: {
    main: '#f50057',
    text: '#fff'
  }
}


........................

ThemeContext.tsx

import React, { createContext } from 'react'
import { theme } from './theme'

type ThemeContextProviderProps = {
  children: React.ReactNode
}

const ThemeContext = createContext(theme)

export const ThemeContextProvider = ({
  children
}: ThemeContextProviderProps) => {
  return <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>
}

....

Box.tsx

import { useContext } from 'react'
import { ThemeContext } from './ThemeContext'

export const Box = () => {
  const theme = useContext(ThemeContext)
  return (
    <div
      style={{
        backgroundColor: theme.primary.main,
        color: theme.primary.text
      }}>
      Theme context
    </div>
  )
}

..............

App.tsx

import { UserContextProvider } from './components/context/UserContext'
import { User } from './components/context/User'

function App(){
    return(
        <div>
            <UserContextProvider>
                <User />
            </UserContextProvider>
        </div>
    )

}

.................

User.tsx

import { useContext } from 'react'
import { UserContext } from './UserContext'

export const User = () => {
  const userContext = useContext(UserContext)
  const handleLogin = () => {
    // if (userContext) {
    userContext.setUser({
      name: 'Vishwas',
      email: 'asd@asd.com'
    })
    // }
  }
  const handleLogout = () => {
    // if (userContext) {
    userContext.setUser(null)
    // }
  }
  return (
    <div>
      <button onClick={handleLogin}>Login</button>
      <button onClick={handleLogout}>Logout</button>
      <div>User name is {userContext.user?.name}</div>
      <div>User email is {userContext.user?.email}</div>
      {/* <div>User name is {userContext?.user?.name}</div>
      <div>User email is {userContext?.user?.email}</div> */}
    </div>
  )
}

.......

UserContext.tsx

import React, { useState, createContext } from 'react'

type AuthUser = {
  name: string
  email: string
}

type UserContextType = {
  user: AuthUser | null
  setUser: React.Dispatch<React.SetStateAction<AuthUser | null>>
}

type UserContextProviderProps = {
  children: React.ReactNode
}

// export const UserContext = createContext<UserContextType | null>(null)

export const UserContext = createContext({} as UserContextType)

export const UserContextProvider = ({ children }: UserContextProviderProps) => {
  const [user, setUser] = useState<AuthUser | null>(null)
  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  )
}

.............

App.tsx

........

DomRef.tsx

import { useRef, useEffect } from 'react'

export const DomRef = () => {

  const inputRef = useRef<HTMLInputElement>(null!)
//  const inputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    inputRef.current.focus()
// inputRef.current?.focus()

  }, [])
  return (
    <div>
      <input type='text' ref={inputRef} />
    </div>
  )
}

.......................

MutableRef.tsx

import { useState, useRef, useEffect } from 'react'

export const MutableRef = () => {
  const [timer, setTimer] = useState(0)
  const interValRef = useRef<number | null>(null)

  const stopTimer = () => {
    if (interValRef.current) {
      window.clearInterval(interValRef.current)
    }
  }
  useEffect(() => {
    interValRef.current = window.setInterval(() => {
      setTimer(timer => timer + 1)
    }, 1000)
    return () => {
      stopTimer()
    }
  }, [])

  return (
    <div>
      HookTimer - {timer} -
      <button onClick={() => stopTimer()}>Stop Timer</button>
    </div>
  )
}

...............

16 videos completed

...............

17-video

App.tsx

import { Counter } from './components/class/Counter'

function App(){
return (
    <div>
        <Counter message='The count value is ' />
    </div>
)
}
,,

Counter.tsx

import { Component } from 'react'

type CounterProps = {
  message: string
}
type CounterState = {
  count: number
}

/** The count value is 5 */

// export class Counter extends Component<CounterProps, CounterState> {
// export class Counter extends Component<{}, CounterState> {
export class Counter extends Component<CounterProps> {
  state = {
    count: 0
  }

  handleClick = () => {
    this.setState(prevState => ({ count: prevState.count + 1 }))
  }
  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Increment</button>
        {this.props.message} {this.state.count}
      </div>
    )
  }
}

...........
18 - video

App.tsx

import { Private } from '../components/auth/Private'
import { Profile } from '../components/auth/Profile'


function App(){
return (
    <div>
        <Private isLoggedIn={true} component={Profile} />
    </div>
)
}

export default App

....

Private.tsx


import { Login } from '../components/Login'
import { ProfileProps } from '../components/Profile'


type PrivateProps = {
    isLoggedIn: boolean
    component: React.ComponentType<ProfileProps>
}

export const Private => ({ isLoggedIn, component:Component}: PrivateProps){
if(isLoggedIn){
    return <Component name="krishna" />
}else {
    return <Login />
}
}

...

Profile.tsx


export type ProfileProps = {
    name: string
}

export const Profile => ({ name}: ProfileProps){
    return (
<div>
    Private Profile component name is {name}
</div>
    )
}

...

Login.tsx

export const Login => (){
    return (
<div>
    Please login to continue
</div>
    )
}

............

19 - video

METHOD-1

App.tsx


import { List } from './components/generics/List'

function App(){
return (
    <div>
          <List
        items={['Batman', 'Superman', 'Wonder Woman']}
        onClick={item => console.log(item)}
      />
    </div>
)
}

export default App
...

List.tsx

type ListProps = {
  items: string[]
  onClick: (value: string) => void
}

export const List = ({
  items,
  onClick
}: ListProps) => {
  return (
    <div>
      <h2>List of items</h2>
      {items.map((item, index) => {
        return (
          <div key={index} onClick={() => onClick(item)}>
            {item}
          </div>
        )
      })}
    </div>
  )
}

..............

METHOD: 2

App.tsx


import { List } from './components/generics/List'

function App(){
return (
    <div>
           <List
        items={['Batman', 'Superman', 'Wonder Woman']}
        onClick={item => console.log(item)}
      />
      <List items={[1, 2, 3]} onClick={item => console.log(item)} /> 
     
)
}

export default App
...

List.tsx

type ListProps = {
  items: string[] | number[]
  onClick: (value: string | number) => void
}

export const List = ({
  items,
  onClick
}: ListProps) => {
  return (
    <div>
      <h2>List of items</h2>
      {items.map((item, index) => {
        return (
          <div key={index} onClick={() => onClick(item)}>
            {item}
          </div>
        )
      })}
    </div>
  )
}

.........................

METHOD: 3

App.tsx

import { List } from './components/generics/List'

function App(){
return (
    <div>
           <List
        items={['Batman', 'Superman', 'Wonder Woman']}
        onClick={item => console.log(item)}
      />
      <List items={[1, 2, 3]} onClick={item => console.log(item)} />
      <List
        items={[
          {
          
            first: 'Bruce',
            last: 'Wayne'
          },
          {
          
            first: 'Clark',
            last: 'Kent'
          },
          {
          
            first: 'Princess',
            last: 'Diana'
          }
        ]}
        onClick={item => console.log(item)}
      />
    </div>
)
}

export default App
...

List.tsx

type ListProps<T> = {
  items: T[]
  onClick: (value: T) => void
}

//export const List = <T extends {}>({
export const List = <T extends string | number>({
  items,
  onClick
}: ListProps<T>) => {
  return (
    <div>
      <h2>List of items</h2>
      {items.map((item, index) => {
        return (
          <div key={index} onClick={() => onClick(item)}>
            {item}
          </div>
        )
      })}
    </div>
  )
}

......................


METHOD: 4

App.tsx

import { List } from './components/generics/List'

function App(){
return (
    <div>
        {/*   <List
        items={['Batman', 'Superman', 'Wonder Woman']}
        onClick={item => console.log(item)}
      />
      <List items={[1, 2, 3]} onClick={item => console.log(item)} /> */}

      <List
        items={[
          {
            id: 1,
            first: 'Bruce',
            last: 'Wayne'
          },
          {
            id: 2,
            first: 'Clark',
            last: 'Kent'
          },
          {
            id: 3,
            first: 'Princess',
            last: 'Diana'
          }
        ]}
        onClick={item => console.log(item)}
      />
    </div>
)
}

export default App
...

List.tsx

type ListProps<T> = {
  items: T[]
  onClick: (value: T) => void
}

//export const List = <T extends {id: number}>({
export const List = <T extends string | number>({
  items,
  onClick
}: ListProps<T>) => {
  return (
    <div>
      <h2>List of items</h2>
      {items.map((item, index) => {
        return (
          <div key={item.id} onClick={() => onClick(item)}>
            {item}
          </div>
        )
      })}
    </div>
  )
}

....................

video - 20

App.tsx

import { RandomNumber } from './components/restriction/RandomNumber'


function App(){
return (
    <div>
          <RandomNumber value={10} isPositive />
      </div>
)}

....................

RandomNumber.tsx

type RandomNumberType = {
  value: number
}

type PositiveNumber = RandomNumberType & {
  isPositive: boolean
  isNegative?: never
  isZero?: never
}

type NegativeNumber = RandomNumberType & {
  isNegative: boolean
  isPositive?: never
  isZero?: never
}

type Zero = RandomNumberType & {
  isZero: boolean
  isPositive?: never
  isNegative?: never
}

type RandomNumberProps = PositiveNumber | NegativeNumber | Zero

export const RandomNumber = ({
  value,
  isPositive,
  isNegative,
  isZero
}: RandomNumberProps) => {
  return (
    <div>
      {value} {isPositive && 'positive'} {isNegative && 'negative'}{' '}
      {isZero && 'zero'}
    </div>
  )
}

............................

video - 21

METHOD: 1

import { Toast } from './components/Toast'


function App(){
return (
    <div>
         <Toast position='left-center' />
      </div>
)}

...

Toast.tsx


/**
 * Position prop can be one of
 * "left-center" | "left-top" | "left-bottom" | "center" | "center-top" |
 * "center-bottom" | "right-center" | "right-top" | "right-bottom"
 */

type HorizontalPosition = 'left' | 'center' | 'right'
type VerticalPosition = 'top' | 'center' | 'bottom'

type ToastProps = {position: `${HorizontalPosition}-${VerticalPosition}`}

export const Toast = ({ position }: ToastProps) => {
  return <div>Toast Notification Position - {position}</div>
}

..............................


METHOD: 2

import { Toast } from './components/Toast'

function App(){
return (
    <div>
        // <Toast position='center-center' />
            <Toast position='center' />
      </div>
)}

...

Toast.tsx


/**
 * Position prop can be one of
 * "left-center" | "left-top" | "left-bottom" | "center" | "center-top" |
 * "center-bottom" | "right-center" | "right-top" | "right-bottom"
 */

type HorizontalPosition = 'left' | 'center' | 'right'
type VerticalPosition = 'top' | 'center' | 'bottom'

//type ToastProps = {position:Exclude<`${HorizontalPosition}-${VerticalPosition}`, 'center-center'>}
type ToastProps = {position:Exclude<`${HorizontalPosition}-${VerticalPosition}`, 'center-center'> | 'center' }

export const Toast = ({ position }: ToastProps) => {
  return <div>Toast Notification Position - {position}</div>
}






















