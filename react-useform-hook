npm install react-hook-form

npm install -D @hookform/devtools



...

import { useForm } from "react-hook-form";
import { DevTool } from "@hookform/devtools";


type FormValues = {
  username: string;
  email: string;
  channel: string;
  
};

export const YoutubeForm = () => {

  const form = useForm<FormValues>();
   const { register, control, handleSubmit } = form;

  const onSubmit = (data: FormValues) => {
    console.log("Form submitted", data);
  };

<div>
        <form onSubmit={handleSubmit(onSubmit)}>
          <label htmlFor="username">User Name</label>
          <input type="text" id="username" {...register("username")} />

          <label htmlFor="email">Email</label>
          <input type="email" id="email" {...register("email")} />

          <label htmlFor="channel">Channel</label>
          <input type="text" id="channel" {...register("channel")} />

          <button type="submit">Submit</button>
        </form>
        <DevTool control={control} />
      </div>
  }

....

        <form onSubmit={handleSubmit(onSubmit)} noValidate>

..
<input
            type="text"
            id="username"
            {...register("username", {
              required: { value: true, message: "Username is required" },
            })}
          />

...

 <input type="email" id="email"  {...register("email", {
              pattern: {
                value:  /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
                message: "Invalid email format",
              }, 
        validate: {
                notAdmin: (fieldValue) => {
                  return (
                    fieldValue !== "admin@example.com" ||
                    "Enter a different email address"
                  );
                },
  notBlackListed: (fieldValue) => {
                  return (
                    !fieldValue.endsWith("baddomain.com") ||
                    "This domain is not supported"
                  );
                },
 emailAvailable: async (fieldValue) => {
                  const response = await fetch(
                    `https://jsonplaceholder.typicode.com/users?email=${fieldValue}`
                  );
                  const data = await response.json();
                  return data.length === 0 || "Email already exists";
                },
})}/>

....

const { register, control, handleSubmit, formState } = form;
const {errors} = formState

...

 <p className="error">{errors.username?.message}</p>
..

Additional Features:


type FormValues = {
  username: string;
  email: string;
  channel: string;
  
};


const form = useForm<FormValues>({
  defaultValues: {
    username:"Batman",
    email:"",
    channel:""
  }
});

...


const form = useForm<FormValues>({
  defaultValues: async () => {
      const response = await fetch(
        "https://jsonplaceholder.typicode.com/users/1"
      );
      const data = await response.json();
      return {
        username: "Batman",
        email: data.email,
        channel: "",
    });

...


type FormValues = {
  username: string;
  email: string;
  channel: string;
   social:{
      twitter:string,
      facebook:string
    }
};


const form = useForm<FormValues>({
  defaultValues: {
    username:"Batman",
    email:"",
    channel:"",
    social:{
      twitter:'',
      facebook:''
    }
  }
});

    <label htmlFor="channel">Twitter</label>
      <input type="text" id="twitter" {...register("social.twitter")} />
      <label htmlFor="channel">Facebook</label>
      <input type="text" id="twitter" {...register("social.facebook")} />

...


type FormValues = {
  username: string;
  email: string;
  channel: string;
   social:{
      twitter:string,
      facebook:string
    };
  phoneNumbers: string[]
};


const form = useForm<FormValues>({
  defaultValues: {
    username:"Batman",
    email:"",
    channel:"",
    social:{
      twitter:'',
      facebook:''
    },
    phoneNumbers: ["", ""]
  }
});

 <input
        type="text"
        id="primary-phone"
        {...register("phoneNumbers.0")}
      />
      <label htmlFor="secondary-phone">Secondary Phone Number</label>
      <input
        type="text"
        id="secondary-phone"
        {...register("phoneNumbers.1")}
      />

...........

import { useForm, useFieldArray } from "react-hook-form";


type FormValues = {
  username: string;
  email: string;
  channel: string;
   social:{
      twitter:string,
      facebook:string
    };
  phoneNumbers: string[];
  phNumbers:{
      number:string
  }[]
};


const form = useForm<FormValues>({
  defaultValues: {
    username:"Batman",
    email:"",
    channel:"",
    social:{
      twitter:'',
      facebook:''
    },
    phoneNumbers: ["", ""],
    phNumbers: [{ number: "" }],
  }
});

 const { fields, append, remove } = useFieldArray({
    name: "phNumbers",
    control,
  });

  <div>
          <label>List of phone numbers</label>
          <div>
            {fields.map((field, index) => (
              <div className="form-control" key={field.id}>
                <input
                  type="text"
                  {...register(`phone.${index}.number` as const)}
                />

                {index > 0 && (
                  <button type="button" onClick={() => remove(index)}>
                    Remove
                  </button>
                )}
              </div>
            ))}
            <button
              type="button"
              onClick={() =>
                append({
                  number: "",
                })
              }
            >
              Add phone number
            </button>
          </div>
        </div>

.................


type FormValues = {
  username: string;
  email: string;
  channel: string;
   social:{
      twitter:string,
      facebook:string
    };
  phoneNumbers: string[];
  phNumbers:{
      number:string
  }[];
age:number
};


const form = useForm<FormValues>({
  defaultValues: {
    username:"Batman",
    email:"",
    channel:"",
    social:{
      twitter:'',
      facebook:''
    },
    phoneNumbers: ["", ""],
    phNumbers: [{ number: "" }],
    age:0
  }
});

  <div className="form-control">
          <label htmlFor="age">Age</label>
          <input
            type="number"
            id="age"
            {...register("age", {
              valueAsNumber: true,
              required: { value: true, message: "Age is required" },
            })}
          />
          <p className="error">{errors.age?.message}</p>
        </div>

......


type FormValues = {
  username: string;
  email: string;
  channel: string;
   social:{
      twitter:string,
      facebook:string
    };
  phoneNumbers: string[];
  phNumbers:{
      number:string
  }[];
age:number;
dob: Date
};


const form = useForm<FormValues>({
  defaultValues: {
    username:"Batman",
    email:"",
    channel:"",
    social:{
      twitter:'',
      facebook:''
    },
    phoneNumbers: ["", ""],
    phNumbers: [{ number: "" }],
    age:0,
    dob:new Date()
  }
});

 <div className="form-control">
          <label htmlFor="dob">Date of Birth</label>
          <input
            type="date"
            id="dob"
            {...register("dob", {
              valueAsDate: true,
              required: { value: true, message: "Date of Birth is required" },
            })}
          />
          <p className="error">{errors.dob?.message}</p>
        </div>

...

const { register, control, handleSubmit, formState, watch } = form;

const watchUserName = watch("username")

<h2>Watched value: {watchUserName}</h2>

....

const watchUserName = watch(["username","email"])

...

const watchForm = watch()

<h2>Watched value: {JSON.stringify(watchForm)}</h2>

...

useEffect(() => {
    const subscription = watch((value) =>
      console.log(value)
    );
    return () => subscription.unsubscribe();
  }, [watch]);

....

const { register, control, handleSubmit, formState, watch, getValues } = form;


  const handleGetValues = () => {
    console.log("Get values", getValues());
    //  console.log("Get values", getValues("username"));
//  console.log("Get values", getValues(["username", "channel"]));
  };

<button type="button" onClick={handleGetValues}>
          Get values
        </button>

....


const { register, control, handleSubmit, formState, watch, getValues, setValue } = form;

  const handleSetValue = () => {
    setValue("username", "", {
      shouldValidate: true,
      shouldDirty: true,
      shouldTouch: true,
    });
  };

<button type="button" onClick={handleSetValue}>
          Set value
        </button>

...

 const {
    errors,
  
    touchedFields,
    dirtyFields,
    isDirty
  } = formState;

...........................

  <label htmlFor="channel">Facebook</label>
    <input type="text" id="twitter" {...register("social.facebook", {disabled: true})} />

...

  <label htmlFor="channel">Facebook</label>
  <input type="text" id="twitter" {...register("social.facebook", {disabled: watch("channel") === "", required:"Enter facebook profile"})} />

...

import { FieldErrors, useForm, useFieldArray } from "react-hook-form";

const onError = (errors: FieldErrors<FormValues>) => {
    console.log("Form errors", errors);
  };

<form onSubmit={handleSubmit(onSubmit, onError)}>

....



 const {
    errors,
    touchedFields,
    dirtyFields,
    isDirty
    isValid
  } = formState;


<button disabled={!isDirty || !isValid}>Submit</button>

...

const {
    errors,
    touchedFields,
    dirtyFields,
    isDirty,
    isValid,
    isSubmitting,
    isSubmitted,
    isSubmitSuccessful,
    submitCount
  } = formState;


<button disabled={ !isDirty || !isValid || isSubmitting }>Submit</button>

...

const { register, control, handleSubmit, formState, watch, getValues, setValue, reset } = form;

<button disabled={ !isDirty || isSubmitting }>Submit</button>

 useEffect(() => {
    if (isSubmitSuccessful) {
      reset();
    }
  }, [isSubmitSuccessful, reset]);

        <button type="button" onClick={()=> reset()}>
          Reset
        </button>

..........

const form = useForm<FormValues>({
  defaultValues: {
    username:"Batman",
    email:"",
    channel:"",
    social:{
      twitter:'',
      facebook:''
    },
    phoneNumbers: ["", ""],
    phNumbers: [{ number: "" }],
    age:0,
    dob:new Date(),
  },
  mode:'onSubmit' // default
  // mode: 'onBlur'
  // mode: 'onTouched'
  // mode: 'onChange'
  // mode: 'all'
});

.........................................

const { register, control, handleSubmit, formState, watch, getValues, setValue, reset, trigger } = form;

 <button type="button" onClick={()=> trigger()}>
          Validate
        </button>

.....

  <button type="button" onClick={()=> trigger("channel")}>
          Validate
        </button>

.........................


