npm i formik

.............................

import { useFormik } from "formik";

......................

 const formik = useFormik({
    initialValues: {
      name: "Krishna",
      email: "",
      channel: "",
    },

......................


<from>
   <div className="form-control">
        <label htmlFor="name">Name</label>
        <input
          type="text"
          id="name"
          name="name"
          onChange={formik.handleChange}
          value={formik.values.name}
        />
      </div>
</form>

.............................

 <form onSubmit={formik.handleSubmit}>
        <button type="submit">Submit</button>
    </form>

.............................


    onSubmit: (values) => {
      console.log("Form data", values);
    },

........................


const validate = (values) => {
  const errors = {};

  if (!values.name) {
    errors.name = "Required";
  }

  if (!values.email) {
    errors.email = "Required";
  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)) {
    errors.email = "Invalid email format";
  }

  if (!values.channel) {
    errors.channel = "Required";
  }

  return errors;
};

.............................................


function OldYoutubeForm() {
  const formik = useFormik({
    initialValues,
    onSubmit,
    validate,
  });

export default OldYoutubeForm;

...

formik.errors.email ? (
          <div className='error'>{formik.errors.email}</div>
        ) : null}

....................................

onBlur={formik.handleBlur}

...

{formik.touched.email && formik.errors.email ? (
          <div className='error'>{formik.errors.email}</div>
        ) : null}

...................................

npm i yup

...

import * as Yup from 'yup'

...

const validationSchema = Yup.object({
  name: Yup.string().required('Required'),
  email: Yup.string()
    .email('Invalid email format')
    .required('Required'),
  channel: Yup.string().required('Required')
})

...

const formik = useFormik({
    initialValues,
    onSubmit,
    // validate,
    validationSchema
  })

..........













