mongosh;
show dbs;
use newDatabase
show collections
db.employee.find()
db.employee.find({FIRST_NAME : /li/})
db.employee.find({FIRST_NAME : {$regex : "Sh"}})
case sensitive
db.employee.find({FIRST_NAME : {$regex : "ab" , $options: "i"}})
db.employee.find({JOBID : {$regex : "^AC"}})
db.employee.count()
db.employee.find({JOBID : "30"})
db.employee.find({},{"FIRST_NAME":1, "LAST_NAME":1, "SALARY":1})
db.employee.find({},{"FIRST_NAME":1, "LAST_NAME":1, "SALARY":1, "_id":0})
db.employee.find({},{"_id":0}).sort({customer:1})
db.employee.find().sort({ type:1 , weight:-1, _id:1})
db.employee.find().limit(10)
db.employee.find({},{FIRST_NAME: value}).limit(10)
db.employee.find().sort({FIRST_NAME:1}).limit(10)
it
db.employee.find({},{"_id":0, "FIRST_NAME":1, "LAST_NAME":1, "MANAGER_ID":1}).sort({MANAGER_ID:1})
db.employee.find({},{"_id":0, "FIRST_NAME":1, "LAST_NAME":1, "MANAGER_ID":1, "Salary":1}).sort({MANAGER_ID:1, Salary:-1})
db.employee.find({},{"_id":0, "FIRST_NAME":1, "LAST_NAME":1, "MANAGER_ID":1, "Salary":1}).sort({MANAGER_ID:1, Salary:-1}).limit(4)
db.employee.createIndex({ SALARY : 1})
db.employee.getIndexes()
db.employee.dropIndex({ SALARY: 1})
db.employee.createIndex({ SALARY : 1, JOBID : -1})
db.employee.createIndex({ SALARY.SALARYID : 1})
db.employee.aggregate([{$match: {DEPARTMENT_ID: '100'}}])
db.orders.aggregate([{ $group: { _id:"$cust_id" }}])
db.orders.aggregate([{ $group: { _id:"$cust_id", total: { $sum: "$amount"}}}])
db.orders.aggregate([{ $match: {DEPARTMENT_ID: "60"}}, { $count: "Total employees in dep : 60"}])
db.orders.aggregate([
        { $match: { status: "A"}},
        { $group: { _id:"$cust_id", total: { $sum: "$amount"}}}
])

db.orders.find({ PaymentMode: { $eq: "Card" } }); // equal to
db.orders.find({ orderTotal: { $neq: 600 } }); // not equal to
db.orders.find({ orderTotal: { $gt: 3000 } }); // gratter than
db.orders.find({ orderTotal: { $gte: 2500 } }); // gratter than or equal
db.orders.find({ orderTotal: { $lt: 500 } }); // less than
db.orders.find({ orderTotal: { $lte: 2500 } }); // less than or equal
db.orders.find({ $and: [{address.city: "Delhi"}, {paymentmode: "Cash"}]}); // 
db.orders.find({ $or: [{city: "Delhi"}, {orderTotal: { $lte: 1000}}]}); // 
db.orders.find({ $nor: [{city: "Delhi"}, {paymentmode: { "cash" }}]}); // 
db.employees.find({ "empAge":{$exists: true, $gte:35}}); // 
db.employees.find({ "empAge":{$type:"double"}}); // 
db.order.find({ "OrderItems":{$all:["notebook", "paper"]}}); // 
db.order.find({ "OrderItems":{$size: 4}}); // 
$currentDate
$inc
$min
$max
$mul
$rename

db.orders.find({ Customer:/ra/}); // 
db.orders.find({ PaymentMode:{$regex:"Ca"}}); // word starts with ca 
db.orders.find({ OrderItems:{$regex:"$ok"}}); // word ends with ok

1.54

var map = function () {
  emit(this.subject, this.marks);
};

var reduce = function (Subject, Marks) {
  return Array.sum(Marks);
};

db.marks.mapReduce(map, reduce, { out: "result" });
db.customerDetails.findAndModify({
  query: { _id: 1899, item_available: { $gt: 0 } },
  update: {
    $inc: { item_available: -1 },
    $push: { item_bought_by: { customer: "Ajay", date: "01-01-2023" } },
  },
});











