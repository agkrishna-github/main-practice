import React, { useState } from "react";
import { useFormik } from "formik";
import * as Yup from "yup";

const Home = () => {
  const initialValues = {
    empId: "",
    password: "",
  };

  const validationSchema = Yup.object().shape({
    empId: Yup.string().required("Required Employ Id"),
    password: Yup.string().min(5).required("Required Password"),
    // .matches(passwordRules, { message: "Please create a stronger password" })
    // confirmPassword:Yup.string().oneOf([Yup.ref(("password"), null)])
  });

  const onSubmit = (values, actions) => {
    console.log(values);
    console.log(actions);
    actions.resetForm();
  };

  const {
    values,
    errors,
    touched,
    handleBlur,
    handleChange,
    handleSubmit,
    isSubmitting,
  } = useFormik({
    initialValues,
    validationSchema,
    onSubmit,
  });

  return (
    <section className="h-svh bg-blue-300 flex justify-center items-center">
      <div className="p-5 md:w-11/12 md:mx-auto md:h-[50%] md:my-auto shadow shadow-black bg-white rounded-md flex flex-col justify-center gap-y-10">
        <h3>Login</h3>

        <form onSubmit={handleSubmit} className="flex flex-col gap-y-10">
          <div className="flex flex-col gap-y-5 w-[75%]">
            <label htmlFor="empId">Enter Id</label>
            <input
              type="text"
              name="empId"
              id="empId"
              value={values.empId}
              onChange={handleChange}
              onBlur={handleBlur}
              className={
                errors.empId && touched.empId ? "p-2 border-red-600" : "p-2"
              }
            />
            {errors.empId && touched.empId && (
              <p className="text-red-600 font-bold">{errors.empId}</p>
            )}
          </div>
          <div className="flex flex-col gap-y-5 w-[75%]">
            <label htmlFor="password">Enter Password</label>
            <input
              type="password"
              name="password"
              id="password"
              value={values.password}
              onChange={handleChange}
              onBlur={handleBlur}
              className={
                errors.password && touched.password
                  ? "p-2 border-red-600"
                  : "p-2"
              }
            />
            {errors.password && touched.password && (
              <p className="text-red-600 font-bold">{errors.password}</p>
            )}
          </div>
          <button disabled={isSubmitting} type="submit" className="p-2 w-[75%]">
            Submit
          </button>
        </form>
      </div>
    </section>
  );
};

export default Home;
