download node

npm install -g typescript

tsc -v

...........

main.ts

let message = "Hello world"

console.log(message)

tsc main.ts
or
tsc main

main.js file is created

run command

node main.js

......

export {}

...

tsc main --watch

...

let isBeginner: boolean = true;

let total: number = 1;

let name: string = 'krishna'
...

let n: null = null;

let u: undefined = undefined;

.....

let isNew: boolean = null;    // possible

let myName: string = undefined    // possible

......

let list1: number[] = [1,2,3]

let list2: Array<number> = [1,2,3]

....

let person1: [string, number] = ['krish', 22];

......

enum Color {Red, Green ,Blue}

let c: Color = Color.Green;
console.log(c)

...

enum Color {Red = 5, Green ,Blue}     // possible

let c: Color = Color.Green;
console.log(c)

...

let randomValue: any = 10

randomValue = true;        //  possible
randomValue = 'krishna';    // possible

...

let myVariable: any = 10;

console.log(myVariable.name);    // possible
myVariable();    // possible
myVariable.toUpperCase();    // possible

...


let myVariable: unknown = 10;

console.log(myVariable.name);    // not-possible
myVariable();                    // not-possible
myVariable.toUpperCase();        // not-possible

........
let myVariable: unknown = 10;

(myVariable as string).toUpperCase();   // possible

...

let myVariable: unknown = 10;

function hasName(obj: any): obj is {name: string} {
  return !!obj && typeof obj === "object" && "name" in obj
}

if(hasName(myVariable){
  console.log(myVariable.name);
})

// possible

.........

let a;
a = 10;
a = true;

// possible

...

let b = 20;
b = true;

// not-possible;

...

let multiType: number | boolean;
multiType = 20;
multiType = true;

......

function add(num1: number, num2: number){
  return num1 + num2;
}
add(5, 10)   // possible
add(5, '10')  // not-possible

........


function add(num1: number, num2: number): number {
  return num1 + num2;
}

.............


function add(num1: number, num2: number): number{
  return num1 + num2;
}
add(5)    // not-possible

......


function add(num1: number, num2?: number): number{
  return num1 + num2;
}
add(5)    // possible

...


function add(num1: number, num2?: number): number{
  if(num2) {
   return num1 + num2; 
  } else {
    return num1  
  }
  
}

add(5, 10)
add(5)   

...........


function add(num1: number, num2: number = 10): number{
  if(num2) {
   return num1 + num2; 
  } else {
    return num1  
  }
  
}

add(5, 15)
add(5)   

........

function fullName(person: {firstName: string, lastName: string}){
    console.log(`${person.firstName} ${person.lastName}`)
}
let p = {
  firstName: 'Krishna',
  lastName: 'arjun'
}

fullName(p)

...

interface Person {
  firstName: string;
  lastName: string;
}


function fullName(person: Person){
    console.log(`${person.firstName} ${person.lastName}`)
}
let p = {
  firstName: 'Krishna',
  lastName: 'arjun'
}

fullName(p)

.....


interface Person {
  firstName: string;
  lastName?: string;
}


function fullName(person: Person){
    console.log(`${person.firstName} ${person.lastName}`)
}
let p = {
  firstName: 'Krishna'
}

fullName(p)

.......

class Employee {
  employeeName: string;

  constructor(name: string){
    this.employeeName = name;
  }
  greet(){
    console.log(`Good Mornig ${this.employeeName}`)
  }
}

let emp1 = new Employee('krishna');

console.log(emp1.employeeName);
emp1.greet();

..............

contunue above:

class Manager extends Employee {
  constructor(managerName: string){
    super(managerName);
  }
  delegateWork(){
    console.log(`delegating tasks`)
  }
}

let m1 = new Manager('Krish-2')

....

public  employeeName: string;   // possible

private employeeName: string;    // not-possible

protected employeeName: string;    // possible in derived class

............

































