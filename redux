const BUY_CAKE = 'BUY_CAKE';

function buyCake () {
    return {
        type: BUY_CAKE,
        info: 'First Redux Action'
    }
}

..............................

const initialState = {
    numOfCakes: 10
}

const reducer =(state= initialState, action) =>{
switch(action.type){
    case BUY_CAKE:
        return {
            ...state,
            numOfCakes: state.numOfCakes - 1
        }
        default:
            return state
}
}

...................

const redux = require('redux')
const createStore = redux.createStore

const BUY_CAKE = "BUY_CAKE";

function buyCake() {
  return {
    type: BUY_CAKE,
    info: "First Redux Action",
  };
}


const initialState = {
    numOfCakes: 10
}

const reducer =(state= initialState, action) =>{
switch(action.type){
    case BUY_CAKE:
        return {
            ...state,
            numOfCakes: state.numOfCakes - 1
        }
        default:
            return state
}
}

const store = createStore(reducer)
console.log('initial state', store.getState())
const unsubscribe = store.subscribe(() => {})
store.dispatch(buyCake())
store.dispatch(buyCake())
store.dispatch(buyCake())
unsubscribe()

.................................

const redux = require('redux')
const createStore = redux.createStore

const BUY_CAKE = "BUY_CAKE";
const BUY_ICECREAM = "BUY_ICECREAM";

function buyCake() {
  return {
    type: BUY_CAKE,
    info: "First Redux Action",
  };
}
function buyIcecream() {
  return {
    type: BUY_ICECREAM,
  };
}


const initialState = {
    numOfCakes: 10,
    numOfIcecreams:20
}

const reducer =(state= initialState, action) =>{
switch (action.type) {
  case BUY_CAKE:
    return {
      ...state,
      numOfCakes: state.numOfCakes - 1,
    };
  case BUY_ICECREAM:
    return {
      ...state,
      numOfIcecreams: state.numOfIcecreams - 1,
    };
  default:
    return state;
}
}

const store = createStore(reducer)
console.log('initial state', store.getState())
const unsubscribe = store.subscribe(() => {})
store.dispatch(buyCake())
store.dispatch(buyCake())
store.dispatch(buyCake())
store.dispatch(buyIcecream())
store.dispatch(buyIcecream())
store.dispatch(buyIcecream())
unsubscribe()

..............................

const redux = require('redux')
const createStore = redux.createStore
const combineReducers = redux.combineReducers

const BUY_CAKE = "BUY_CAKE";
const BUY_ICECREAM = "BUY_ICECREAM";

function buyCake() {
  return {
    type: BUY_CAKE,
    info: "First Redux Action",
  };
}
function buyIcecream() {
  return {
    type: BUY_ICECREAM,
  };
}


const initialCakeState = {
    numOfCakes: 10,
}

const initialIcecreamState = {
    numOfIcecreams:20
}

const cakeReducer = (state = initialCakeState, action) => {
  switch (action.type) {
    case BUY_CAKE:
      return {
        ...state,
        numOfCakes: state.numOfCakes - 1,
      };
   
    default:
      return state;
  }
};

const iceCreamReducer = (state = initialIcecreamState, action) => {
  switch (action.type) {
   
    case BUY_ICECREAM:
      return {
        ...state,
        numOfIcecreams: state.numOfIcecreams - 1,
      };
    default:
      return state;
  }
};

const rootReducer = combineReducers({
    cake:cakeReducer,
    iceCream: iceCreamReducer
})

const store = createStore(rootReducer)
console.log('initial state', store.getState())
const unsubscribe = store.subscribe(() => {})
store.dispatch(buyCake())
store.dispatch(buyCake())
store.dispatch(buyCake())
store.dispatch(buyIcecream())
store.dispatch(buyIcecream())
store.dispatch(buyIcecream())
unsubscribe()

...........................

npm install redux-logger

const redux = require('redux')
const reduxLogger = require('redux-logger')

const createStore = redux.createStore
const combineReducers = redux.combineReducers
const applyMiddleware = redux.applyMiddleware
const logger =reduxLogger.createLogger()

const BUY_CAKE = "BUY_CAKE";
const BUY_ICECREAM = "BUY_ICECREAM";

function buyCake() {
  return {
    type: BUY_CAKE,
    info: "First Redux Action",
  };
}
function buyIcecream() {
  return {
    type: BUY_ICECREAM,
  };
}


const initialCakeState = {
    numOfCakes: 10,
}

const initialIcecreamState = {
    numOfIcecreams:20
}

const cakeReducer = (state = initialCakeState, action) => {
  switch (action.type) {
    case BUY_CAKE:
      return {
        ...state,
        numOfCakes: state.numOfCakes - 1,
      };
   
    default:
      return state;
  }
};

const iceCreamReducer = (state = initialIcecreamState, action) => {
  switch (action.type) {
   
    case BUY_ICECREAM:
      return {
        ...state,
        numOfIcecreams: state.numOfIcecreams - 1,
      };
    default:
      return state;
  }
};

const rootReducer = combineReducers({
    cake:cakeReducer,
    iceCream: iceCreamReducer
})

const store = createStore(rootReducer, applyMiddleware(logger))
console.log('initial state', store.getState())
const unsubscribe = store.subscribe(() => {})
store.dispatch(buyCake())
store.dispatch(buyCake())
store.dispatch(buyCake())
store.dispatch(buyIcecream())
store.dispatch(buyIcecream())
store.dispatch(buyIcecream())
unsubscribe()




















