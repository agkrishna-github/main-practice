npm i json-server

npm i react-query
...

 "scripts": {
   
    "serve-json": "json-server --watch db.json --port 4000"
  },

...

npm serve-json

...

App.js

import { QueryClientProvider, QueryClient } from 'react-query'
import { ReactQueryDevtools } from 'react-query/devtools'

const queryClient = new QueryClient()

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <Router>
        <div>
          <nav>
            <ul>
              <li>
                <Link to='/'>Home</Link>
              </li>
              <li>
                <Link to='/super-heroes'>Traditional Super Heroes</Link>
              </li>
              <li>
                <Link to='/rq-super-heroes'>RQ Super Heroes</Link>
              </li>
            </ul>
          </nav>
          <Switch>
            <Route path='/super-heroes'>
              <SuperHeroesPage />
            </Route>
            <Route path='/rq-super-heroes/:heroId'>
              <RQSuperHeroPage />
            </Route>
            <Route path='/rq-super-heroes'>
              <RQSuperHeroesPage />
            </Route>
            <Route path='/rq-parallel'>
              <ParallelQueriesPage />
            </Route>
            <Route path='/rq-dynamic-parallel'>
              <DynamicParallelPage heroIds={[1, 3]} />
            </Route>
            <Route path='/rq-dependent'>
              <DependentQueriesPage email='vishwas@example.com' />
            </Route>
            <Route path='/rq-paginated'>
              <PaginatedQueriesPage />
            </Route>
            <Route path='/rq-infinite'>
              <InfiniteQueriesPage />
            </Route>
            <Route path='/'>
              <HomePage />
            </Route>
          </Switch>
        </div>
      </Router>
      <ReactQueryDevtools initialIsOpen={false} position='bottom-right' />
    </QueryClientProvider>
  )
}


........................


src/components/Superheroespage.js

import { useState, useEffect } from 'react'
import axios from 'axios'

export const SuperHeroesPage = () => {
  const [isLoading, setIsLoading] = useState(true)
  const [data, setData] = useState([])
  const [error, setError] = useState('')

  useEffect(() => {
    axios
      .get('http://localhost:4000/superheroes')
      .then(res => {
        setData(res.data)
        setIsLoading(false)
      })
      .catch(error => {
        setError(error.message)
        setIsLoading(false)
      })
  }, [])

  if (isLoading) {
    return <h2>Loading...</h2>
  }

  if (error) {
    return <h2>{error}</h2>
  }

  return (
    <>
      <h2>Super Heroes Page</h2>
      {data.map(hero => {
        return <div key={hero.name}>{hero.name}</div>
      })}
    </>
  )
}

.................

src/components/RqSuperheroespage.js

import {useQuery} from 'react-query'
import axios from 'axios'

export const RQSuperHeroesPage = () => {

const { isLoading, data, isError, error } = useQuery('super-heroes', ()=>{
 return axios.get('http://localhost:4000/superheroes')
})

 if (isLoading) {
    return <h2>Loading...</h2>
  }


 if (isError) {
    return <h2>{error.message}</h2>
  }


return (
   <>
     <h2>RQ Super Heroes Page</h2>
      {data?.data.map(hero => {
        return <div key={hero.name}>{hero.name}</div>
      }})
   <>
)
}

..................

const fetchSuperHeroes = () => {
  return axios.get('http://localhost:4000/superheroes')
}

const {isLoading, data} = useQuery('super-heroes', fetchSuperHeroes)

...............


const { isLoading, data, isFetching } = useQuery('super-heroes', fetchSuperHeroes)

...............

const { isLoading, data, isFetching } = useQuery('super-heroes', fetchSuperHeroes, { cacheTime: 5000 })

....................

const { isLoading, data, isFetching } = useQuery('super-heroes', fetchSuperHeroes, { staleTime: 30000  // default staleTime: 0 })

.....................

const { isLoading, data, isFetching } = useQuery('super-heroes', fetchSuperHeroes, { refetchOnMount: false  // default refetchOnMount: true }) // always

.....................

const { isLoading, data, isFetching } = useQuery('super-heroes', fetchSuperHeroes, { refetchOnWindowFocus : false  // default refetchOnWindowFocus: true })

..................

const { isLoading, data, isFetching } = useQuery('super-heroes', fetchSuperHeroes, { refetchInterval : 2000  // default refetchInterval: false })

..................

const { isLoading, data, isFetching } = useQuery('super-heroes', fetchSuperHeroes, { refetchInterval : 2000, refetchIntervalInBackground: true })

..................

 if (isLoading || isFetching) {
    return <h2>Loading...</h2>
  }

const { isLoading, data, isFetching, refetch } = useQuery('super-heroes', fetchSuperHeroes, { enabled: false })

<button onClick={refetch}>Fetch heroes</button>

.....................








